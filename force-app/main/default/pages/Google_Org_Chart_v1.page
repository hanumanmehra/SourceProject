<apex:page standardStylesheets="false" standardController="Account" extensions="Google_Org_ChartController" showHeader="true" sidebar="true" Title="Relationship Mapper">
    <html>
        <head>   
            <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>  
            <apex:includeScript value="{!URLFOR($Resource.arbor, '/arbor-v0.92/demos/_/jquery-1.6.1.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.NodeTreeFile)}"/>
            <apex:includeScript value="{!URLFOR($Resource.ZoomOrgChart,'jQuery-Plugin-For-Panning-Zooming-Any-Elements-panzoom/dist/jquery.panzoom.js')}"/>
            
           <!-- <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
            <script>window.jQuery || document.write('<script src="vendor/jquery-1.11.2.min.js"><\/script>')</script>-->
             
            
            <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/> -->
            <style>
                .firstname{ color:#001e39; font-weight:bold}
                .designation{ color:#555}
                body{ background:#eaedf2; margin:50px 0 0 0}
                .google-visualization-orgchart-node{position:relative; background: #ffffff; /* Old browsers */
                background: -moz-linear-gradient(top, #ffffff 0%, #edeff2 100%); /* FF3.6-15 */
                background: -webkit-linear-gradient(top, #ffffff 0%,#edeff2 100%); /* Chrome10-25,Safari5.1-6 */
                background: linear-gradient(to bottom, #ffffff 0%,#edeff2 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
                filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#edeff2',GradientType=0 ); /* IE6-9 */ /* IE6-9 */ border:0; padding:5px; border-radius:0;box-shadow:0px 0px 5px #afb2b6; border-radius:4px}
                .userimg{position: relative;margin-top: -35px;border-radius: 50%;border: 1px solid #fff;padding:2px; background:#eaedf2}
                .google-visualization-orgchart-connrow-medium {height: 35px;font-size: 4px;}
                .google-visualization-orgchart-lineleft {border-left: 2px solid #9398a0;}
                .google-visualization-orgchart-lineright {border-right: 2px solid #9398a0;}
                .google-visualization-orgchart-linebottom {border-bottom: 2px solid #9398a0;}
                .rating{ }
                //.rating ul{margin:0; padding:0; list-style-type:none;display:inline-block; width:100%; position: relative;}
                .rating ul {
                    margin: 0;
                    padding: 0;
                    margin-top: 7px;
                    height: 14px;
                    list-style-type: none;
                    display: inline-block;
                    width: 100%;
                    width: 90px;
                    position: relative;
                    clear: both;
                    float: left;
                }
                //.rating ul li {margin: 0;padding: 0;list-style-type: none;display: inline-block;width:20%; height:10px; opacity:0.3; float: left;border: 1px solid #fff; box-sizing: border-box;}
                .rating ul li {
                    margin: 0;
                    padding: 0;
                    list-style-type: none;
                    display: inline-block;
                    width: 15%;
                    height: 10px;
                    opacity: 0.3;
                    float: left;
                    border: 1px solid #fff;
                    box-sizing: border-box;
                }
                .rating ul li.active {opacity:1}
            </style>
            
            <style type="text/css">
                html, body {
                  font: 10pt arial;
                  padding: 0;
                  margin: 0;
                  width: 100%;
                  height: 100%;
                } 
                .button {
                    background-color: #4CAF50; /* Green */
                    border: none;
                    color: white;
                    padding: 15px 32px;
                    text-align: center;
                    text-decoration: none;
                    font-size: 16px;
                    margin: 4px 2px;
                    cursor: pointer;
                    border-radius: 12px;
                }
                
                .sidenav {
                    height: 100%;
                    width: 0;
                    position: fixed;
                    z-index: 1;
                    top: 0;
                    right:0;
                    background-color: #ffffff;
                    overflow-x: hidden;
                    transition: 0.5s;
                    padding:50px 0 0 0;
                }
                
                .sidenav a {
                    padding: 8px 8px 8px 32px;
                    text-decoration: none;
                    font-size: 25px;
                    color: #818181;
                    display: block;
                    transition: 0.3s;
                }
                
                .sidenav a:hover, .offcanvas a:focus{
                    color: #f1f1f1;
                }
                
               .sidenav .closebtn {
                    position: absolute;
                    top: 0;
                    right: 0;
                    font-size: 36px;
                    line-height: 17px;
                    padding: 15px;
                }
                
                @media screen and (max-height: 450px) {
                  .sidenav {padding-top: 15px;}
                  .sidenav a {font-size: 18px;}
                }
                
                div.circle {
                    border-radius: 50%;
                    width: 20px;
                    height: 20px;
                    background: #2B7CE9;
                    display: inline-block;
                    vertical-align: middle;
                }
                
                div.square {
                    width: 20px;
                    height: 20px;
                    background: #C5000B;
                    display: inline-block;
                    vertical-align: middle;
                }
                div.ovels{
                    height: 15px;
                    width: 20px;
                    border-radius: 50%;
                    background: #FFA500;
                    display: inline-block;
                    vertical-align: middle;
                }
                .ui-widget-content {
                    display: inline-block;
                   padding: 50px 20px 20px 20px;
                   border: none;
                } 
                #draggable { width: 150px; height: 150px; padding: 0.5em; }
                
                .tooltip2 {
                    position: relative;
                    display: inline-block;
                    //border-bottom: 1px dotted black;
                }
                
                .tooltip2 .tooltiptext {
                    visibility: hidden;
                    width: 120px;
                    background-color: #555;
                    color: #fff;
                    text-align: center;
                    border-radius: 6px;
                    padding: 5px 0;
                    position: absolute;
                    z-index: 1;
                   
                    margin-left: -60px;
                    opacity: 0;
                    transition: opacity 1s;
                }
                
                .tooltip2 .tooltiptext::after {
                    content: "";
                    position: absolute;
                    top: 100%;
                    left: 50%;
                    margin-left: -5px;
                    border-width: 5px;
                    border-style: solid;
                    border-color: #555 transparent transparent transparent;
                }
                
                .tooltip2:hover .tooltiptext {
                    visibility: visible;
                    opacity: 1;
                }
                .tooltip2 .tooltip-right::after {
                    content: "";
                    position: absolute;
                    top: 50%;
                    left: -3px;
                    margin-top: -5px;
                    border-width: 5px;
                    border-style: solid;
                    border-color: transparent #555 transparent transparent;
                }
                .tooltip2 .tooltip-right {
                    top: -5px;
                    left:170%;
                }
                
                .iconli {
                    width: 25%!important;
                    height: 22px!important;
                    vertical-align: middle;
                    position: relative;
                    top: -4px;
                    opacity: 1!important;
                    border: 0!important;
                }
                .expandplus {
                    position: absolute;
                    width: 15px;
                    height: 15px;
                    background: #fff;
                    border-radius: 50%;
                    bottom: -40px;
                    left: 42px;
                    font-size: 14px;
                    font-weight: bold;
                    text-decoration: none;
                    box-shadow: 0 0 7px #ccc;
                    color: #555;
                    line-height: 12px;
                }
                .icon {
                    display: inline-block;
                    padding: 2px;
                }
               /* .pulsShow{
                    display:block;
                }
                .pulsHide{
                    display:None;
                }*/
                
                 .show {
                    display:bolck;
                }
                .show_hide {
                    display:none;
                }
                body .bPageTitle {
                padding: 15px 0 0 0!important;
                margin-bottom: 0;
            }
             .zoom_controls {
                margin: 5px 0 0 30px;
                padding: 0;
                display: inline-block;
                list-style-type: none;
                position: relative;
            }
            .zoom_controls li{ margin:0; padding:0; display:inline-block; list-style-type:none}
            .zoom_controls li a{color:#fff; border:1px solid #0fb4e7; margin:0; padding:5px 10px; display:inline-block; text-align:center; text-decoration:none; border-radius:0px;
             font-weight:bold; background: #a9e4f7; /* Old browsers */
            background: -moz-linear-gradient(top, #a9e4f7 0%, #0fb4e7 100%); /* FF3.6-15 */
            background: -webkit-linear-gradient(top, #a9e4f7 0%,#0fb4e7 100%); /* Chrome10-25,Safari5.1-6 */
            background: linear-gradient(to bottom, #a9e4f7 0%,#0fb4e7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#a9e4f7', endColorstr='#0fb4e7',GradientType=0 ); border-radius:4px; /* IE6-9 */}
            
            .logodiv {
                position: absolute;
                top: 10px;
                right: 15px;
                width: 200px;
            }
            
            .logodiv img {
                 max-width:100% 
            }
            body .bPageTitle {padding: 10px 0 0 0!important;}
            
            .headerdiv {
                border-bottom: 1px solid #ccc;
                height: 90px;
                position: relative;
                padding-bottom: 10px;
            }

            .descriptionDiv{ 
                display: inline-block;
                max-width: 500px;
                width:500px;
            }
            html, body {
            width: auto;

            }
            
            .ancrClsMaxmin{
                display: inline-block;
                float: right;
                margin: 0 0 0 10px;
            }
            .oRight{ float:left; max-width:1089px; width:100%}
            .ui-widget-content a:hover{text-decoration:none}
            
            </style>
        </head>
        <body> 
            <apex:includeScript value="{!URLFOR($Resource.arbor, '/arbor-v0.92/demos/_/jquery-1.6.1.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.arbor, '/arbor-v0.92/lib/arbor.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.arbor, '/arbor-v0.92/demos/_/jquery.address-1.4.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.arbor, '/arbor-v0.92/demos/_/graphics.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.VisResource, '/vis-4.20.0/dist/vis.js')}"/>
            <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>
            <link rel="stylesheet" href="/resources/demos/style.css"/>
            <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
            <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
            
            <div class="headerdiv">
                <apex:sectionHeader title="Org Chart" subtitle="{!Account.Name}"/>
                <div class="descriptionDiv"> {!Account.Description}</div>
                <div class="logodiv"> <image src="{!URLFOR($Resource.RelationshipIcon)}" > </image> </div> 
                <ul class="zoom_controls">
                    <li><a href="#" class="zoom_in">+</a></li>
                    <li><a href="#" class="zoom_reset">Reset</a></li>
                    <li><a href="#" class="zoom_out">-</a></li>
                    <a href="/apex/Google_Org_Chart_v1?isdtp=vw&scontrolCaching=1&id={!Account.Id}" style="display:{!if($currentPage.parameters.isdtp != 'vw', 'inline-block','none')}" class="ancrClsMaxmin" title="Full Page View"><img src="{!URLFOR($Resource.MaximizeImage)}"/></a>
                    <a href="/apex/Google_Org_Chart_v1?scontrolCaching=1&id={!Account.Id}" style="display:{!if($currentPage.parameters.isdtp == 'vw', 'inline-block','none')}"  class="ancrClsMaxmin" title="Normal Page View"><img src="{!URLFOR($Resource.MinimizeImage)}"/></a>
                </ul>
            </div>         
            <div style="overflow:hidden"> 
                <div id="chart_div" class="ui-widget-content" style="border:0px; cursor: move;"> 
                </div>
            </div>
            <!--<div class="col-md-11" id="mynetwork" style="display:none;height: 100%;"></div> 
                <div id="sidebar" class="col-md-1" style="display:none;">
                    <span style="font-size:30px;cursor:pointer;float: right;line-height: 25px;padding: 15px 0 0 0;" onclick="openNav()">&#9776; </span>
                    <div id="mySidenav" class="sidenav">
                        <div style="margin:15px">
                            <button type="button" id="myBtn" onclick="myFunction()" style="display:none;margin:10px 0 30px 0" class="btn btn-warning">Back To Org Chart</button>
                            <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a> 
                            <section>
                                <h3>Element</h3>
                                <div style=" margin: 15px;">
                                    <div style="margin-bottom: 10px;">
                                        <div class="circle"></div>
                                        <div style="display: inline-block;">Object</div>
                                    </div>
                                    <div style="margin-bottom: 10px;">
                                        <div class="square">                             
                                        </div>
                                        <div style="display: inline-block;">Contact</div>
                                    </div>
                                    <div>
                                        <div class="ovels">
                                        </div>
                                        <div style="display: inline-block;">Record</div>
                                    </div>
                                </div>
                            </section>
                            <br></br>
                            <section>
                                <h3>Relationship</h3>
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" class="account" value="Account" checked="checked"/>
                                        Account
                                    </label>
                                </div>
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" value="Opportunity" class="Opp" checked="checked"/>
                                        Opportunity
                                    </label>
                                </div>
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" value="contact" class="contact" checked="checked"/>
                                        Contact
                                    </label>
                                </div>
                                <div class="checkbox">
                                    <label>
                                        <input type="checkbox" value="User" class="users" checked="checked"/>
                                        User
                                    </label>
                                </div>
                            </section>
                            <br></br>
                            
                            <section>
                                <h3>Degree</h3>
                                <select id="mySelect" class="form-control">
                                    <option value="1">One</option>
                                    <option value="2">Two</option>
                                    <option value="3">Three</option>
                                </select>
                                <button type="button" id="myBtn2" onclick="degree()" style="display:block;margin:10px 0 0 0" class="btn btn-success" >Apply</button>
                            </section>
                        </div>
                    </div>
                </div>--> 
            </body>
            <script>
                $( function() {
                    $( "#chart_div" ).draggable().resizable();
                } );
            </script>
            
           <!-- <script type="text/javascript">
                var networkcontactId = '';
                function degree(){
                    var selectedanswer=document.getElementById("mySelect").selectedIndex +1;
                    drawDegreeNetork(networkcontactId,selectedanswer);
                }
            
                function drawDegreeNetork(contactId,Degree){
                    networkcontactId =contactId; 
                    var degreeOfNewtork =Degree; 
                    //alert('degreeOfNewtork ::'+degreeOfNewtork);
                    
                    var isAccount =$('.account').is(":checked");
                    var isOpportunity = $('.Opp').is(":checked");
                    var isContact =$('.contact').is(":checked");
                    var isUser = $('.users').is(":checked");
                    
                    var ids =contactId;
                    var nodes = null;
                    var edges = null;
                    var network = null; 
                    var LENGTH_MAIN = 350,
                    LENGTH_SERVER = 150,
                    LENGTH_SUB = 50,
                    WIDTH_SCALE = 2,
                    GREEN = 'green',
                    RED = '#C5000B',
                    ORANGE = 'orange',
                    //GRAY = '#666666',
                    GRAY = 'gray',
                    BLACK = '#2B1B17';
                    
                    // Create a data table with nodes.
                    nodes = [];
                    
                    // Create a data table with links.
                    edges = [];
                    var mapOfHigherDegreeOpportunity = new Object(); // or var map = {};
                    var mapOfAccountContact =  new Object();
                    var mapOfDegreeAccountName=  new Object();
                    var mapOfDegreeAccountIds=  new Object();
                    if(degreeOfNewtork == 2 || degreeOfNewtork == 3){
                        <apex:repeat value="{!wr_degreeNetworkGraphList}" var="wr_deNet">
                            mapOfHigherDegreeOpportunity['{!wr_deNet.degreeOfGraph}'] ='{!wr_deNet.listOfOpportunity}';
                            mapOfAccountContact['{!wr_deNet.degreeOfGraph}'] = '{!wr_deNet.contactList}'; 
                            //console.log('acc'+mapOfAccountContact['{!wr_deNet.degreeOfGraph}']);
                            //console.log('degree'+'{!wr_deNet.degreeOfGraph}');
                            mapOfDegreeAccountName['{!wr_deNet.degreeOfGraph}'] = '{!wr_deNet.accountName}'; 
                            mapOfDegreeAccountIds['{!wr_deNet.degreeOfGraph}'] = '{!wr_deNet.accountIds}';                 
                        </apex:repeat>                
                    }
                  
                    // group around 2
                    <apex:repeat value="{!contactsChart}" var="wr_contact"> 
                        if('{!wr_contact.node_Contact_Id }' === ids){
                            nodes.push({id: 1, label: '{!wr_contact.Name }', group: 'Contact', value: 10,"shape": "image", "image": "{!wr_contact.image_URL}"});
                           
                            if(isAccount){
                                nodes.push({id: 3, label: 'Accounts', group: 'Account2', value: 6});
                                edges.push({from: 1, to: 3, length: LENGTH_MAIN, width: WIDTH_SCALE * 4, label: ''});
                                nodes.push({id:'{!wr_contact.accountIds}' , label:'{!wr_contact.accountName}', group: 'Opportunity', value: 1});
                                edges.push({from: 3, to: '{!wr_contact.accountIds}', length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                            }
                            if(isOpportunity){
                                nodes.push({id: 2, label: 'Opportunities', group: 'Account2', value: 8});
                                edges.push({from: 1, to: 2, length: LENGTH_MAIN, width: WIDTH_SCALE * 6, label: ''}); 
                                
                                var listOfOpp = '{!wr_contact.listOfOpportunity}';
                                //console.log('list of opp :'+listOfOpp);
                                
                                if(listOfOpp.length >0){
                                    var Opportuniites = listOfOpp.replace("[","");
                                    Opportuniites = Opportuniites.replace("]","");
                                    var res = Opportuniites.split(",");
                                    var j;
                                    //console.log('res  :'+res[1]);
                                    for (j = 0; j < res.length; j++) {
                                        var listOfOppIdAndName = res[j].split(":");
                                        var OppId = listOfOppIdAndName[0].trim(); 
                                        nodes.push({id:OppId, label:listOfOppIdAndName[1], group: 'Opportunity', value: j+1});
                                        edges.push({from: 2, to:OppId, length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                    }
                                } 
                            }
                            if(isUser){
                                nodes.push({id: 4, label: 'Users', group: 'Account2', value: 5}); 
                                edges.push({from: 1, to: 4, length: LENGTH_MAIN, width: WIDTH_SCALE * 4, label: ''});
                               
                                nodes.push({id:'{!wr_contact.ownerIds}' , label:'{!wr_contact.ownerName}', group: 'Opportunity', value: 7});
                                edges.push({from: 4, to:'{!wr_contact.ownerIds}', length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                            }
                        
                            if(degreeOfNewtork ==2 || degreeOfNewtork ==3){
                                if(isAccount){ 
                                    var temp=degreeOfNewtork ;
                                    if(temp == 3){
                                        degreeOfNewtork =degreeOfNewtork-1;
                                    }
                                    nodes.push({id: 5, label: 'Parent Account', group: 'Account2', value: 11});
                                    edges.push({from: '{!wr_contact.accountIds}', to: 5, length: LENGTH_MAIN, width: WIDTH_SCALE * 4, label: ''});
                                    //console.log('Test of map '+ mapOfDegreeAccountIds[degreeOfNewtork]);
                                    
                                    if(mapOfDegreeAccountName[degreeOfNewtork] != undefined){
                                        nodes.push({id:mapOfDegreeAccountIds[degreeOfNewtork] , label:mapOfDegreeAccountName[degreeOfNewtork], group: 'Opportunity', value: 1});
                                        edges.push({from: 5, to: mapOfDegreeAccountIds[degreeOfNewtork], length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                    }
                                    
                                    if(isOpportunity){
                                        if(mapOfDegreeAccountIds[degreeOfNewtork] != undefined ){
                                            nodes.push({id: 6, label: 'Opportunities', group: 'Account2', value: 8});
                                            edges.push({from:mapOfDegreeAccountIds[degreeOfNewtork], to: 6, length: LENGTH_MAIN, width: WIDTH_SCALE * 6, label: ''});
                                        }
                               
                                        var listOfParentOpp = mapOfHigherDegreeOpportunity[degreeOfNewtork];
                                        //console.log('listOfParentOpp :'+listOfParentOpp);
                                        if(listOfParentOpp != undefined && listOfParentOpp.length >0){
                                            var Opportuniites1 = listOfParentOpp.replace("[","");
                                            Opportuniites1 = Opportuniites1.replace("]","");
                                            var res1 = Opportuniites1.split(",");
                                            var k;
                                            //console.log('res of opp  :'+res1[1]);
                                            for (k = 0; k < res1.length; k++) {
                                                var listOfOppIdAndName1 = res1[k].split(":");
                                                var OppId1 = listOfOppIdAndName1[0].trim(); 
                                                //console.log('OppId1'+OppId1);
                                                nodes.push({id:OppId1, label:listOfOppIdAndName1[1], group: 'Opportunity', value: k+1});
                                                edges.push({from:6, to:OppId1, length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                            }
                                        }
                                    }
                                    
                                    if(isContact){
                                        var listOfParentcontactsFirstdegree  = mapOfAccountContact[degreeOfNewtork];
                                        //console.log('listOfParentcontactsFirstdegree:'+listOfParentcontactsFirstdegree);
                                        
                                        if(listOfParentcontactsFirstdegree != undefined && listOfParentcontactsFirstdegree.length >0){
                                            var contactsFirstdegree = listOfParentcontactsFirstdegree.replace("[","");
                                            contactsFirstdegree= contactsFirstdegree.replace("]","");
                                            var resContact = contactsFirstdegree.split(",");
                                            var u;
                                            //console.log('res of resContact:'+resContact[1]);
                                            nodes.push({id: 10, label: 'Contacts', group: 'Account2', value: 13});
                                            edges.push({from:'{!wr_contact.accountIds}' , to: 10, length: LENGTH_MAIN, width: WIDTH_SCALE * 6, label: ''});
                                           
                                            for (u = 0; u< resContact.length; u++) {
                                                var listOfContactIdAndNamefisrtdegree = resContact[u].split(":");
                                                var contactId = listOfContactIdAndNamefisrtdegree[0].trim(); 
                                                //console.log('contId'+contactId );
                                                nodes.push({id:contactId ,label:listOfContactIdAndNamefisrtdegree[1], group: 'Opportunity', value: u+1});
                                                edges.push({from:10, to:contactId, length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                            }
                                        }
                                    }
                                    
                                    if(temp ==3){
                                        degreeOfNewtork =temp;   
                                        if(isContact){
                                            var listOfParentcontacts = mapOfAccountContact[degreeOfNewtork];
                                            //console.log('listOfParentcontacts :'+listOfParentcontacts );
                                            
                                            if(listOfParentcontacts != undefined && listOfParentcontacts.length >0){
                                                var contacts = listOfParentcontacts.replace("[","");
                                                contacts = contacts.replace("]","");
                                                var resCont = contacts.split(",");
                                                var s;
                                                //console.log('res of cont  :'+resCont [1]);
                                                nodes.push({id: 7, label: 'Contacts', group: 'Account2', value: 13});
                                                edges.push({from:mapOfDegreeAccountIds[degreeOfNewtork-1] , to: 7, length: LENGTH_MAIN, width: WIDTH_SCALE * 6, label: ''});
                                                for (s = 0; s< resCont.length; s++) {
                                                    var listOfContactIdAndName = resCont[s].split(":");
                                                    var contId = listOfContactIdAndName[0].trim(); 
                                                    //console.log('contId'+contId);
                                                    nodes.push({id:contId, label:listOfContactIdAndName[1], group: 'Opportunity', value: s+1});
                                                    edges.push({from:7, to:contId, length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                                }
                                            }
                                        }
                                        
                                        if(mapOfDegreeAccountIds[degreeOfNewtork] != undefined && mapOfDegreeAccountName[degreeOfNewtork] != undefined){
                                            nodes.push({id: 8, label: 'Parent Account', group: 'Account2', value: 11});
                                            edges.push({from: mapOfDegreeAccountIds[degreeOfNewtork-1], to: 8, length: LENGTH_MAIN, width: WIDTH_SCALE * 4, label: ''});
                                            //console.log('Test of map '+ mapOfDegreeAccountIds[degreeOfNewtork]);
                                            nodes.push({id:mapOfDegreeAccountIds[degreeOfNewtork] , label:mapOfDegreeAccountName[degreeOfNewtork], group: 'Opportunity', value: 1});
                                            edges.push({from: 8, to: mapOfDegreeAccountIds[degreeOfNewtork], length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                            if(isOpportunity){
                                                nodes.push({id: 9, label: 'Opportunities', group: 'Account2', value: 9});
                                                edges.push({from:mapOfDegreeAccountIds[degreeOfNewtork], to: 9, length: LENGTH_MAIN, width: WIDTH_SCALE * 6, label: ''});
                                            }
                                        }
                                        
                                        if(isOpportunity){
                                            var listOfParentOpp2 = mapOfHigherDegreeOpportunity[degreeOfNewtork];
                                            ////console.log('listOfParentOpp :'+listOfParentOpp2);
                                            if(listOfParentOpp2!= undefined && listOfParentOpp2.length >0){
                                                var Opportuniites2 = listOfParentOpp2.replace("[","");
                                                Opportuniites2 = Opportuniites2.replace("]","");
                                                var res2 = Opportuniites2.split(",");
                                                var n;
                                                //console.log('res of opp  :'+res2[1]);
                                                for (n = 0; n < res2.length; n++) {
                                                    var listOfOppIdAndName2 = res2[n].split(":");
                                                    var OppId2 = listOfOppIdAndName2[0].trim(); 
                                                    //console.log('OppId1'+OppId2);
                                                    nodes.push({id:OppId2, label:listOfOppIdAndName2[1], group: 'Opportunity', value: n+1});
                                                    edges.push({from:9, to:OppId2, length: LENGTH_SUB, color: GRAY, width: WIDTH_SCALE * 2});
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    </apex:repeat>
                    
                    // create a network
                    var container = document.getElementById('mynetwork');
                    var data = {
                        nodes: nodes,
                        edges: edges
                    };
                    
                    var options = {
                    nodes: {
                       color: '#ff0000',
                       fixed: false,
                       font: '20px arial',
                        scaling: {
                            min: 28,
                            max: 38    
                        }
                    },
                    edges: {
                      color: GRAY,
                      smooth: false
                    },
                    physics:{
                        barnesHut:{gravitationalConstant:-30000},
                        stabilization: {iterations:2500}
                    },
                    groups: {
                        'Contact': {
                            shape: 'square',
                            color: "#C5000B", // red
                            //border-radius:"50%"
                            
                        },
                        Opportunity: {
                            color: '#FFA500',   // orange 
                            size:24
                        },
                        Owner: {
                            //shape: 'Owner',
                            color: "#109618" // green
                        }, 
                        'Account': {
                            shape: 'dot',
                            color: '#2B7CE9' // orange
                        },
                        'Account2': {
                            shape: 'dot',
                            color: '#2B7CE9',  // orange
                        }    
                    }
                };
                network = new vis.Network(container, data, options);
                networkgraphShow();
                
                //Call this on click on node of network graph
                network.on('click', function (properties) {    
                    var selection = properties.nodes;
                    var selectedNodeId= selection.toString();
                    //console.log('selectedNodeId:::'+selectedNodeId);
                    if(selectedNodeId.length ==15 || selectedNodeId.length ==18){
                        window.top.location.href='/'+selectedNodeId;
                    }
                });
            }  
        </script> -->
      
        <script>
            
          /*  function openNav() {
                document.getElementById("mySidenav").style.width = "200px";
            }
            
            function closeNav() {
                document.getElementById("mySidenav").style.width = "0";  
            }
        
            function onImageclick(){
                $("[id$='chart_div']").css('display', 'None');   
                $("[id$='sidebar']").css('display', 'block');
                $("[id$='mynetwork']").css('display', 'block');  
                $("[id$='myBtn']").css('display', 'block'); 
            }
            
            function runEffect() {
                // get effect type from 
                // Run the effect
                $( "#chart_div" ).toggle( "slow", "swing", 500 );
            }
            
            function myFunction() {
                var x = document.getElementById("myBtn");
                window.top.location.href='/apex/Google_Org_Chart?id='+'{!Account.Id}';
            }
            
            function networkgraphShow(){
                $("[id$='chart_div']").css('display', 'None'); 
                $("[id$='mynetwork']").css('display', 'block'); 
            }*/
            
            var mapofNodeSign = new Object();
            var expandedContactsIds=new Array();
            var i;
            function check(values,parentId){
                var anchorIds ='anrId'+values; 
                var x;
                console.log('expandedContactsIds:::'+expandedContactsIds);
                console.log('values1111:::'+values);
                
                if(expandedContactsIds.length > 0 ){
                    for(i=0; i<expandedContactsIds.length;i++){
                        var signOfNode =mapofNodeSign[expandedContactsIds[i]];
                        if(signOfNode=='+'){
                           $("#anrId"+expandedContactsIds[i]).css('display','block');
                           $("#anrIds"+expandedContactsIds[i]).css('display','None'); 
                        }
                        else if(signOfNode =='-'){
                            $("#anrId"+expandedContactsIds[i]).css('display','None');
                            $("#anrIds"+expandedContactsIds[i]).css('display','block'); 
                        }
                        console.log('signOfNode'+signOfNode );
                    }
                }
                
                if(mapofNodeSign[values] != undefined){
                    x = mapofNodeSign[values];          
                }
                else{
                     if(parentId ==''){
                        x ='+';
                        console.log('parentId:::'+parentId);
                    }
                    else{
                        x ='+';
                        mapofNodeSign[values] ='+';
                    }
                   
                }
                
                //console.log('x'+x);
                if(x=='+'){
                    //console.log('if');
                    mapofNodeSign[values] ='-';
                    expandedContactsIds
                    if(parentId ==''){
                        // $("#anrIds"+values).text('-'); 
                        $("#"+anchorIds).css('display','none');
                        $("#anrIds"+values).css('display','block');
                    }
                    else{
                        //$("#"+anchorIds).text('-');
                        $("#"+anchorIds).css('display','none');
                        $("#anrIds"+values).css('display','block');
                    }
                    expandedContactsIds.push(values);
                }
                else if(x=='-'){
                    //console.log('else');
                    mapofNodeSign[values] ='+';
                    if(parentId ==''){
                       //$("#anrIds"+values).text('+'); 
                       $("#"+anchorIds).css('display','block');
                       $("#anrIds"+values).css('display','None');
                    }
                    else{
                       // $("#"+anchorIds).text('+');
                        $("#"+anchorIds).css('display','block');
                        $("#anrIds"+values).css('display','none');
                    }
                    expandedContactsIds.push(values);
                }
                //console.log('expandedContactsIds2:: '+expandedContactsIds);
                //var y = document.getElementById(anchorIds).text;
                //console.log('y'+y);
                //oldId =anchorIds;
            }
        </script>
        
        <script type="text/javascript">
            google.charts.load('current', {packages:["orgchart"]});
            google.charts.setOnLoadCallback(drawChart);
            
            function drawChart(){
                var data = new google.visualization.DataTable();
                data.addColumn('string', 'Name');
                data.addColumn('string', 'Manager');
                data.addColumn('string', 'Developer');
                
                // For each orgchart box, provide the name, manager, and tooltip to show.
                var availablecontcts=[];
                var i=0;
                var map = new Object(); // or var map = {};
                var mapofOppContact = new Object(); // or var map = {};
                var mapofContactNodeRelated = new Object(); // or var map = {};
                var previousNode ='';
                var parentNodeNo ='';
                <apex:repeat value="{!contactsChart}" var="wr_contact">
                    var temp = [{v:'{!wr_contact.node_id}', f:'<img src ="{!wr_contact.image_URL}" width="50" height="50" class="userimg"><div class="firstname">{!wr_contact.name}</div><div class="designation">{!wr_contact.title}</div><div class="rating"><ul class="tooltip2"><span class="tooltiptext tooltip-right">Relationship Strength</span> <li class="iconli"><i class="icon"><img src="{!URLFOR($Resource.RatingIcons)}" alt=""></i></li><li style="background:{!wr_contact.rating}; opacity:1"></li>  <li style="background:{!wr_contact.rating}; opacity:1"></li> <li style="background:{!wr_contact.rating}; opacity:1"></li> <li style="background:{!wr_contact.rating};"></li></ul><ul class="tooltip2"><span class="tooltiptext tooltip-right">Communication Strength </span><li class="iconli"><i class="icon"><img src="{!URLFOR($Resource.CommunicationIcon)}" alt=""></i></li><li style="background:{!wr_contact.CommunicationScore}; opacity:1"></li>  <li style="background:{!wr_contact.CommunicationScore}; opacity:1"></li> <li style="background:{!wr_contact.CommunicationScore }; opacity:1"></li> <li style="background:{!wr_contact.CommunicationScore};"></li></ul><ul class="tooltip2"><span class="tooltiptext tooltip-right">Activity </span><li class="iconli"><i class="icon"><img src="{!URLFOR($Resource.ActivityIcon)}" alt=""></i></li> <li style="background:{!wr_contact.activityScore}; opacity:1"></li> <li style="background:{!wr_contact.activityScore}; opacity:1"></li> <li style="background:{!wr_contact.activityScore}; opacity:1"></li> <li style="background:{!wr_contact.activityScore};"></li></ul></div><div class="expandplus" id ="expId{!wr_contact.node_id}" style="display:{!if(wr_contact.isChild == true,'block','none')}"><a id="anrId{!wr_contact.node_id}" value="+" style="display:block">+</a> <a id="anrIds{!wr_contact.node_id}" value="-" style="display:none">-</a></div>'},
                    '{!wr_contact.parent}', '{!wr_contact.title}'];
                    availablecontcts[i] = temp;
                    //previousNode ='{!wr_contact.node_id}'; 
                    if('{!wr_contact.parent }' == null){
                        parentNodeNo = '{!wr_contact.parent }';
                    }
                    map['{!wr_contact.node_id}'] = '{!wr_contact.node_Contact_Id }';
                    mapofOppContact['{!wr_contact.node_Contact_Id }'] = '{!wr_contact.listOfOpportunity}';                                                        
                    i = i+1;
                </apex:repeat>
                
                //console.log(mapofContactNodeRelated);
                data.addRows(availablecontcts);
            
                // Create the chart.
                var chart = new google.visualization.OrgChart(document.getElementById('chart_div'));
                
                // Draw the chart, setting the allowHtml option to true for the tooltips.
                chart.draw(data, {allowHtml:true});
                
                //parentNodeNo = availablecontcts[1][1];
                //if(parentNodeNo===''){
                   //parentNodeNo = availablecontcts[0][1];
                //}
                var collapseContacts=[];
                if(availablecontcts.length >0 ){
                    for(i=0;i<availablecontcts.length;i++) {
                        chart.setSelection([{row: i}]);
                        console.log('test '+JSON.stringify(chart.getSelection()));
                        var temp = chart.getSelection()[0];
                        console.log('temp ::::::::::'+temp.row);
                        var collapsed1 = chart.getCollapsedNodes();
                        console.log('collapsed1  ::::::'+collapsed1 );
                        var selectedValue2 = data.getValue(temp.row,0);
                        var selectedValue1 = data.getValue(temp.row,1);
                        
                        console.log('parentNodeNo ::::::::::'+parentNodeNo);
                        console.log('selectedValue1 ::::::::::'+selectedValue1 );
                        if(parentNodeNo == selectedValue1){
                            var collapsed2 = chart.getCollapsedNodes();
                            console.log('selectedValue3 ::::::::::'+selectedValue1 );
                            var collapse1 = (collapsed1.indexOf(temp.row) == -1);
                            var selectedValue222 = data.getValue(temp.row,0);
                            //console.log('selectedValue222 '+selectedValue222 );
                           // chart.collapse(temp.row, collapse1);
                           if(collapse1 == true){
                                chart.collapse(temp.row, collapse1);
                            }
                           /* else{
                                //chart.collapse(temp.row, false);
                            }*/
                        }
                    }
                    chart.setSelection();
                    //var collapsed = chart.getCollapsedNodes(); 
                    ////console.log('collapsed '+collapsed );
                }
                
                //Find values or id of Nodes in org chart 
                google.visualization.events.addListener(chart, 'select', selectHandler);
            
                function selectHandler(){  
                    var selection = chart.getSelection()[0]; 
                    console.log('Collapse nodes ::::::'+chart.getCollapsedNodes());
                    console.log('selection temp ::::::'+ JSON.stringify(availablecontcts[0][0]));
                    console.log('selection length::::::'+chart.getSelection().length);
                    if(selection){
                        var selectedValue = data.getValue(selection.row,0);
                        var nodesParentValue = data.getValue(selection.row,0);
                        console.log('nodesParentValue ::::::'+nodesParentValue ); 
                        console.log('Json ::::::'+JSON.stringify(availablecontcts[0][1]) );
                        for(j=0;j<availablecontcts.length;j++) {
                       // if(nodesParentValue == availablecontcts[j][1]){ 
                            console.log('Value Of Array '+availablecontcts[j][1]);
                            chart.setSelection([{row: j}]);
                            var temp = chart.getSelection()[0];  
                            var row = selection.row;
                            console.log('row ::::::'+row);
                            // get a list of all collapsed nodes
                            var collapsed = chart.getCollapsedNodes(); 
                            //var collapsed = selection;
                            console.log('collapsed ::::::'+collapsed);
                                
                            // if the node is collapsed, we want to expand it
                            // if it is not collapsed, we want to collapse it
                            var selectedValue2 = data.getValue(temp.row,0);
                            var selectedValue3 = data.getValue(temp.row,1);
                           
                            console.log('selectedValue2 ::::'+selectedValue2 );
                            ////console.log('selectedValue3 ::::'+selectedValue3 );
                            ////console.log('selectedValue4 ::::'+data.getValue(temp.row,2));
                            
                            if(selectedValue == selectedValue2 || selectedValue ==selectedValue3  ){
                                var collapse = (collapsed.indexOf(temp.row) == -1);
                                console.log('collapse ::::'+collapse );
                                //chart.collapse(temp.row, collapse);
                                if(collapse == true){
                                    chart.collapse(temp.row, collapse);
                                }
                                else{
                                    chart.collapse(temp.row, false);
                                }
                            }
                            
                            //clear the selection so the next click will work properly
                            chart.setSelection();
                        //}
                        /*else{
                             chart.collapse(selection.row, false);
                        }*/
                        }
                        //to silde the organization graph on click of node 
                        //runEffect();
                        check(selectedValue,data.getValue(selection.row,1)); 
                        
                        //Draw a network graph for selected node 
                        //drawDegreeNetork(map[selectedValue],1);
                        
                        //To hide organization chart and show network graph 
                        //onImageclick();
                        
                    }
                }
            }  
        </script>
        <script>
            (function( $ ){

            $.page_zoom = function( options ) {
        
                var settings = {
                    max_zoom: 1.5,
                    min_zoom: .5,
                    zoom_increment: .1,
                    current_zoom: 1,
                    selectors: {
                        zoom_in: '.zoom_in',
                        zoom_out: '.zoom_out',
                        zoom_reset: '.zoom_reset'
                    }
                };
                var cookies_available = false;
        
                var methods = {
        
                    // set up
                    init : function( options ) {
        
                        if($.type(options) == 'object'){ // if an object with options was sent, merge it with settings
        
                            settings = $.extend( settings, options);
        
                        }
        
                        if(typeof(Cookies) != 'undefined'){
        
                            cookies_available = true
        
                        }
        
                        if(cookies_available && Cookies.get('page_zoom') == null){
        
                            Cookies.set('page_zoom', 1);
        
                        } else {
        
                            if(cookies_available) {
        
                                settings.current_zoom = parseFloat(Cookies.get('page_zoom'));
        
                            } else {
        
                                settings.current_zoom = 1;
        
                            }
        
                            if(settings.current_zoom != 1){ // only set zoom if it's not the default zoom
                                methods.set_zoom(settings.current_zoom);
                            }
                        }
        
                        // attached zoom functions to page elements
                        $(settings.selectors.zoom_in).bind('click', methods.zoom_in);
                        $(settings.selectors.zoom_out).bind('click', methods.zoom_out);
                        $(settings.selectors.zoom_reset).bind('click', methods.zoom_reset);
        
                    },
        
                    set_zoom : function( zoom_level ) {
        
                        $('#chart_div').css({
                            'zoom': zoom_level,
                            '-moz-transform': 'scale(' + zoom_level + ')',
                            '-moz-transform-origin': '0 0'
                        });
        
                        settings.current_zoom = zoom_level;
        
                        if(cookies_available){
        
                            Cookies.set('page_zoom', zoom_level);
        
                        }
                    },
        
                    zoom_in : function( ) {
        
                        var new_zoom = parseFloat(settings.current_zoom + settings.zoom_increment);
        
                        if(new_zoom < settings.max_zoom) { // don't zoom past the minimum zoom setting
                            methods.set_zoom(new_zoom);
                        } else {
                            methods.set_zoom(settings.max_zoom);
                        }
                    },
        
                    zoom_out : function( ) {
        
                        var new_zoom = parseFloat(settings.current_zoom - settings.zoom_increment);
        
                        if(new_zoom > settings.min_zoom) { // don't zoom past the minimum zoom setting
                            methods.set_zoom(new_zoom);
                        } else {
                            methods.set_zoom(settings.min_zoom);
                        }
                    },
        
                    zoom_reset : function( ) {
        
                        methods.set_zoom(1);
                    }
                };
                methods.init(options);
             };
            })( jQuery );
        </script>
        <!--<apex:includeScript value="{!URLFOR($Resource.JqueryPageZoomMain,'jQuery-Page-Zoom-master/jQuery-Page-Zoom-master/jquery.page_zoom.js')}"/> -->
        <script type="text/javascript">
        
            $(document).ready(function($) {
                $.page_zoom();
            });
        </script>
    </html> 
</apex:page>